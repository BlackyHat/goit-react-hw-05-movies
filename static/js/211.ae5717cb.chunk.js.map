{"version":3,"file":"static/js/211.ae5717cb.chunk.js","mappings":"uQAGaA,EAAYC,EAAAA,GAAAA,IAAH,imBAahB,gBAAGC,EAAH,EAAGA,MAAH,OAAeA,GAAK,8CAA2CA,EAA3C,IAApB,IAeOC,EAAWF,EAAAA,GAAAA,IAAH,iHAQRG,EAAgBH,EAAAA,GAAAA,EAAH,6CAGbI,EAAUJ,EAAAA,GAAAA,GAAH,uOAcPK,GAAWL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,ye,8BCxDRO,EAAe,WACtBC,OAAOC,QAAU,KAGrBC,YAAW,WACTF,OAAOG,OAAO,CACZC,IAAK,IACLC,SAAU,UAEb,GAAE,IACJ,E,SC2GD,EApGsB,WAAO,IAAD,IACpBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAETC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAAwCE,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAY,oBAAGP,EAASQ,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAE7C,GAA0BL,EAAAA,EAAAA,UAAS,GAAnC,eAAOnB,EAAP,KAAcyB,EAAd,KASA,IARAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBV,GACbW,KAAKP,GACLQ,OAAM,YA4Gb,SAA0BhB,GACjBJ,YAAW,WAChB,OAAOI,EAAS,IAAK,CAAEiB,SAAS,GACjC,GAAE,IACJ,CA/GOC,CAAiBlB,EAClB,GACJ,GAAE,CAACI,EAAUJ,KAETO,EACH,OACE,4BACE,UAAChB,EAAD,CAAU4B,GAAIV,EAAd,WACE,SAAC,KAAD,IADF,cAIA,0EACA,2FAIN,IACEW,EAOEb,EAPFa,YACAC,EAMEd,EANFc,OACAC,EAKEf,EALFe,eACAC,EAIEhB,EAJFgB,SACAC,EAGEjB,EAHFiB,aACAC,EAEElB,EAFFkB,aACAC,EACEnB,EADFmB,cAGIC,GAAsC,GAAfH,GAAmBI,UAC1CC,EAAmBR,EAAOS,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,KAE7D,OACE,4BACE,UAACzC,EAAD,CAAU4B,GAAIV,EAAd,WACE,SAAC,KAAD,IADF,cAIA,UAACxB,EAAD,CAAWE,MAAOuC,EAAlB,WACE,gBAAKO,KAAKC,EAAAA,EAAAA,GAAYd,GAAce,IAAKb,KACzC,UAAClC,EAAD,YACE,wBAAKkC,EAAiB,IAAMG,EAAaW,MAAM,EAAG,MAClD,wCAAgBT,EAAsB,SACtC,SAACU,EAAA,EAAD,CACEN,KAAK,YACL5C,MAAOA,EACPmD,SAAU,SAACC,EAAOC,GAChB5B,EAAS4B,EACV,KAEH,SAACnD,EAAD,wBACA,uBAAIkC,KACJ,SAAClC,EAAD,sBACA,uBAAIwC,WAGR,UAACvC,EAAD,YACE,mDACA,yBACE,SAACC,EAAD,CACE4B,GAAG,OACHsB,QAAShD,EACTiB,MAAO,CAAEC,KAAMF,GAHjB,qBAQF,yBACE,SAAClB,EAAD,CACE4B,GAAG,UACHsB,QAAShD,EACTiB,MAAO,CAAEC,KAAMF,GAHjB,wBAQF,yBACE,SAAClB,EAAD,CACE4B,GAAG,iBACHsB,QAAShD,EACTiB,MAAO,CAAEC,KAAMF,GAHjB,4BASJ,SAAC,KAAD,MAGL,C,qEClHYyB,EAAc,SAAAQ,GACzB,OAAIA,EACI,mCAAN,OAA0CA,GAErCC,CACR,C","sources":["components/MoviesDetails/MoviesDetails.styled.jsx","components/utils/handlerScroll.js","components/MoviesDetails/MoviesDetails.jsx","components/utils/checkPoster.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieCard = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  gap: 16px;\n  padding: 16px;\n  margin-top: 16px;\n  border-bottom: 1px solid black;\n  background-image: linear-gradient(\n      to right,\n      rgba(0, 0, 0, 0.56),\n      rgba(0, 0, 0, 0.56)\n    ),\n    ${({ value }) => value && `url(https://image.tmdb.org/t/p/w500/${value})`};\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n\n  & img {\n    width: 40%;\n    border-radius: 8px;\n    object-fit: contain;\n    transition: transform 350ms cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    &:hover {\n      transform: scale(1.05);\n    }\n  }\n`;\nexport const CardInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  & .title {\n    font-weight: 700;\n  }\n`;\nexport const CardInfoTitle = styled.p`\n  font-weight: 700;\n`;\nexport const AddList = styled.ul`\n  padding-bottom: 24px;\n  border-bottom: 1px solid black;\n  display: flex;\n  flex-direction: row-reverse;\n  & p {\n    width: 100%;\n    text-align: center;\n  }\n\n  & li {\n    list-style: none;\n  }\n`;\nexport const BestLink = styled(NavLink)`\n  text-decoration: none;\n  align-items: center;\n  justify-content: center;\n  color: black;\n  gap: 8px;\n  display: flex;\n  padding: 4px;\n  margin-top: 16px;\n  margin-left: 16px;\n  background-color: #dadada;\n  border-radius: 8px;\n  width: 120px;\n  letter-spacing: 1.5;\n  font-weight: 500;\n  transition: color 250ms linear, background-color 250ms linear;\n\n  &:hover {\n    color: #c2c2c2;\n    background-color: #4a4a4a;\n\n    font-weight: 500;\n  }\n`;\n","export const hadlerScroll = () => {\n  if (window.scrollY > 600) {\n    return;\n  }\n  setTimeout(() => {\n    window.scroll({\n      top: 750,\n      behavior: 'smooth',\n    });\n  }, 750);\n};\n","import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieDetails } from 'components/services/api';\nimport {\n  MovieCard,\n  CardInfo,\n  CardInfoTitle,\n  AddList,\n  BestLink,\n} from './MoviesDetails.styled';\nimport { Rating } from '@mui/material';\nimport { IoMdArrowRoundBack } from 'react-icons/io';\nimport { checkPoster } from 'components/utils/checkPoster';\nimport { hadlerScroll } from 'components/utils/handlerScroll';\n\nconst MoviesDetails = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const { moviesId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  const [value, setValue] = useState(2);\n  useEffect(() => {\n    getMovieDetails(moviesId)\n      .then(setMovieDetails)\n      .catch(() => {\n        redirectMainPage(navigate);\n      });\n  }, [moviesId, navigate]);\n\n  if (!movieDetails) {\n    return (\n      <div>\n        <BestLink to={backLinkHref}>\n          <IoMdArrowRoundBack />\n          Go back\n        </BestLink>\n        <p>Information on updating. Try another movie...</p>\n        <p>You will automatically redirect to main page in 5 seconds...</p>\n      </div>\n    );\n  }\n  const {\n    poster_path,\n    genres,\n    original_title,\n    overview,\n    vote_average,\n    release_date,\n    backdrop_path,\n  } = movieDetails;\n  //\n  const userScoreNormalized = (vote_average * 10).toFixed();\n  const genresNormalized = genres.map(({ name }) => name).join(' ');\n  //\n  return (\n    <div>\n      <BestLink to={backLinkHref}>\n        <IoMdArrowRoundBack />\n        Go back\n      </BestLink>\n      <MovieCard value={backdrop_path}>\n        <img src={checkPoster(poster_path)} alt={original_title} />\n        <CardInfo>\n          <h2>{original_title + ' ' + release_date.slice(0, 4)}</h2>\n          <p>User Score: {userScoreNormalized + ' %'}</p>\n          <Rating\n            name=\"read-only\"\n            value={value}\n            onChange={(event, newValue) => {\n              setValue(newValue);\n            }}\n          />\n          <CardInfoTitle>Overview</CardInfoTitle>\n          <p>{overview}</p>\n          <CardInfoTitle>Genres</CardInfoTitle>\n          <p>{genresNormalized}</p>\n        </CardInfo>\n      </MovieCard>\n      <AddList>\n        <p>Additional information</p>\n        <li>\n          <BestLink\n            to=\"cast\"\n            onClick={hadlerScroll}\n            state={{ from: backLinkHref }}\n          >\n            Cast\n          </BestLink>\n        </li>\n        <li>\n          <BestLink\n            to=\"reviews\"\n            onClick={hadlerScroll}\n            state={{ from: backLinkHref }}\n          >\n            Reviews\n          </BestLink>\n        </li>\n        <li>\n          <BestLink\n            to=\"movie-trailers\"\n            onClick={hadlerScroll}\n            state={{ from: backLinkHref }}\n          >\n            Trailers\n          </BestLink>\n        </li>\n      </AddList>\n      <Outlet />\n    </div>\n  );\n};\nexport default MoviesDetails;\n\nMoviesDetails.propTypes = {\n  movieDetails: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string.isRequired,\n      original_title: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      vote_average: PropTypes.string.isRequired,\n      release_date: PropTypes.string.isRequired,\n      genres: PropTypes.arrayOf(\n        PropTypes.exact({\n          id: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired,\n        })\n      ),\n    })\n  ),\n};\n\nfunction redirectMainPage(navigate) {\n  return setTimeout(() => {\n    return navigate('/', { replace: true });\n  }, 5000);\n}\n","import noPoster from './no-poster-available.png';\n\nexport const checkPoster = img => {\n  if (img) {\n    return `https://image.tmdb.org/t/p/w500/${img}`;\n  }\n  return noPoster;\n};\n"],"names":["MovieCard","styled","value","CardInfo","CardInfoTitle","AddList","BestLink","NavLink","hadlerScroll","window","scrollY","setTimeout","scroll","top","behavior","navigate","useNavigate","location","useLocation","moviesId","useParams","useState","movieDetails","setMovieDetails","backLinkHref","state","from","setValue","useEffect","getMovieDetails","then","catch","replace","redirectMainPage","to","poster_path","genres","original_title","overview","vote_average","release_date","backdrop_path","userScoreNormalized","toFixed","genresNormalized","map","name","join","src","checkPoster","alt","slice","Rating","onChange","event","newValue","onClick","img","noPoster"],"sourceRoot":""}