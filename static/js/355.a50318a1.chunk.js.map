{"version":3,"file":"static/js/355.a50318a1.chunk.js","mappings":"4PAEaA,EAAOC,EAAAA,GAAAA,IAAH,8LAWJC,EAAWD,EAAAA,GAAAA,IAAH,iHAQRE,EAAgBF,EAAAA,GAAAA,EAAH,6CAGbG,EAAUH,EAAAA,GAAAA,GAAH,oF,kBCsCpB,EArDsB,WAAO,IAAD,IACpBI,GAAWC,EAAAA,EAAAA,MACTC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAAwCE,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAY,oBAAGP,EAASQ,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UACvCC,GAAUC,EAAAA,EAAAA,QAAOJ,GAMvB,IAJAK,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBX,GAAUY,KAAKR,EAChC,GAAE,CAACJ,IAECG,EAAL,CAGA,IACEU,EAMEV,EANFU,YACAC,EAKEX,EALFW,OACAC,EAIEZ,EAJFY,eACAC,EAGEb,EAHFa,SACAC,EAEEd,EAFFc,aACAC,EACEf,EADFe,aAGIC,GAAsC,GAAfF,GAAmBG,UAC1CC,EAAmBP,EAAOQ,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,KAE7D,OACE,4BACE,SAAC,KAAD,CAASC,GAAIjB,EAAQkB,QAArB,sBACA,UAACjC,EAAD,YACE,gBAAKkC,IAAKC,EAAYf,GAAcgB,IAAKd,KACzC,UAACpB,EAAD,YACE,wBAAKoB,EAAiB,IAAMG,EAAaY,MAAM,EAAG,MAClD,wCAAgBX,EAAsB,SACtC,SAACvB,EAAD,wBACA,uBAAIoB,KACJ,SAACpB,EAAD,sBACA,uBAAIyB,WAGR,UAACxB,EAAD,YACE,mDACA,yBACE,SAAC,KAAD,CAAS4B,GAAG,OAAZ,qBAEF,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,2BAGJ,SAAC,KAAD,MApCH,CAuCF,EAGD,SAASG,EAAYG,GACnB,OAAIA,EACI,mCAAN,OAA0CA,GAErCC,CACR,C","sources":["components/MoviesDetails/MoviesDetails.styled.jsx","components/MoviesDetails/MoviesDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Card = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  gap: 16px;\n  padding: 16px;\n  border-bottom: 1px solid black;\n  & img {\n    width: 240px;\n  }\n`;\nexport const CardInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  & .title {\n    font-weight: 700;\n  }\n`;\nexport const CardInfoTitle = styled.p`\n  font-weight: 700;\n`;\nexport const AddList = styled.ul`\n  padding-bottom: 24px;\n  border-bottom: 1px solid black;\n`;\n","import PropTypes from 'prop-types';\n\nimport { useParams, NavLink, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect, useRef } from 'react';\nimport { getMovieDetails } from 'components/services/api';\nimport { Card, CardInfo, CardInfoTitle, AddList } from './MoviesDetails.styled';\n\nimport noPoster from './no-poster-available.png';\n\nconst MoviesDetails = () => {\n  const location = useLocation();\n  const { moviesId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const backLinkHref = location.state?.from ?? '/movies';\n  const backRef = useRef(backLinkHref);\n\n  useEffect(() => {\n    getMovieDetails(moviesId).then(setMovieDetails);\n  }, [moviesId]);\n\n  if (!movieDetails) {\n    return;\n  }\n  const {\n    poster_path,\n    genres,\n    original_title,\n    overview,\n    vote_average,\n    release_date,\n  } = movieDetails;\n  //\n  const userScoreNormalized = (vote_average * 10).toFixed();\n  const genresNormalized = genres.map(({ name }) => name).join(' ');\n  //\n  return (\n    <div>\n      <NavLink to={backRef.current}>Go back</NavLink>\n      <Card>\n        <img src={checkPoster(poster_path)} alt={original_title} />\n        <CardInfo>\n          <h2>{original_title + ' ' + release_date.slice(0, 4)}</h2>\n          <p>User Score: {userScoreNormalized + ' %'}</p>\n          <CardInfoTitle>Overview</CardInfoTitle>\n          <p>{overview}</p>\n          <CardInfoTitle>Genres</CardInfoTitle>\n          <p>{genresNormalized}</p>\n        </CardInfo>\n      </Card>\n      <AddList>\n        <p>Additional information</p>\n        <li>\n          <NavLink to=\"cast\">Cast</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\">Reviews</NavLink>\n        </li>\n      </AddList>\n      <Outlet />\n    </div>\n  );\n};\nexport default MoviesDetails;\n\nfunction checkPoster(img) {\n  if (img) {\n    return `https://image.tmdb.org/t/p/w500/${img}`;\n  }\n  return noPoster;\n}\n\nMoviesDetails.propTypes = {\n  movieDetails: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string.isRequired,\n      original_title: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      vote_average: PropTypes.string.isRequired,\n      release_date: PropTypes.string.isRequired,\n      genres: PropTypes.arrayOf(\n        PropTypes.exact({\n          id: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired,\n        })\n      ),\n    })\n  ),\n};\n"],"names":["Card","styled","CardInfo","CardInfoTitle","AddList","location","useLocation","moviesId","useParams","useState","movieDetails","setMovieDetails","backLinkHref","state","from","backRef","useRef","useEffect","getMovieDetails","then","poster_path","genres","original_title","overview","vote_average","release_date","userScoreNormalized","toFixed","genresNormalized","map","name","join","to","current","src","checkPoster","alt","slice","img","noPoster"],"sourceRoot":""}